var documenterSearchIndex = {"docs":
[{"location":"ccalls/#Using-JLL-wrappers-in-a-module-1","page":"C calls","title":"Using JLL wrappers in a module","text":"","category":"section"},{"location":"ccalls/#","page":"C calls","title":"C calls","text":"The last step is to use JLL generated binary wrappers to expose a more Julia style API.","category":"page"},{"location":"ccalls/#","page":"C calls","title":"C calls","text":"First let's create new project needs to be generated with Pkg and add sinewave_jll binary wrapper as a dependency","category":"page"},{"location":"ccalls/#","page":"C calls","title":"C calls","text":"(v1.3) pkg> generate SineWave\n(v1.3) pkg> activate SineWave\n(v1.3) pkg> add sinewave_jll","category":"page"},{"location":"ccalls/#","page":"C calls","title":"C calls","text":"Original C library contains a simple struct and 3 functions:","category":"page"},{"location":"ccalls/#","page":"C calls","title":"C calls","text":"init to set values of the internal structure for given frequency\nfill to put consecutive values of the waveform generator\nspectrum to get frequency content of a buffer with samples","category":"page"},{"location":"ccalls/#","page":"C calls","title":"C calls","text":"Insetead of mapping init function directly I will create a Julia structure corresponding to the C structure. Due to the fact that Julia uses the same memory layout, there is no special mapping needed.","category":"page"},{"location":"ccalls/#","page":"C calls","title":"C calls","text":"mutable struct Sine\n    previous::Float64\n    current::Float64\n    cosine::Float64\nend","category":"page"},{"location":"ccalls/#","page":"C calls","title":"C calls","text":"Then I'll define a private constructor that calls the C init with ccall.","category":"page"},{"location":"ccalls/#","page":"C calls","title":"C calls","text":"    function Sine(frequency::Float64, samplerate::Float64)\n        sinewave = new()\n        status = ccall((:init, libsinewave), Cint, (Ref{Sine}, Cdouble, Cdouble), sinewave, frequency samplerate)\n        return sinewave\n    end","category":"page"},{"location":"ccalls/#","page":"C calls","title":"C calls","text":"Next I will map C fill function to Julia Base.fill! function. I will create new method that will take a type defined in this modula as a second parameter.","category":"page"},{"location":"ccalls/#","page":"C calls","title":"C calls","text":"function fill!(buffer::Vector{Float64}, sine::Sine)\n    ccall((:fill, libsinewave), Cvoid, (Ref{Sine}, Ptr{Float64}, Cint), sine, buffer, length(buffer))\nend\n","category":"page"},{"location":"ccalls/#","page":"C calls","title":"C calls","text":"spectrum function is a bit more complicated cause it allocates memory that needs to be freed by caller. To allow GC to do that we can use unsafe_wrap function. There is an optional flag own which tells that underlying array returned from C library must be freed by GC when no longer needed.","category":"page"},{"location":"ccalls/#","page":"C calls","title":"C calls","text":"function spectrum(buffer::Vector{Float64})\n    spectr = ccall((:spectrum, libsinewave), Ptr{Cdouble}, (Ptr{Float64}, Cint), buffer, length(buffer))\n    len = div(length(buffer), 2) + 1\n    return unsafe_wrap(Array{Float64,1}, spectr, len; own = true)\nend","category":"page"},{"location":"wizard/#Wizard-1","page":"Wizard","title":"Wizard","text":"","category":"section"},{"location":"wizard/#","page":"Wizard","title":"Wizard","text":"To create build_tarballs.jl script you might want to use run_wizard() function. Let's do that step by step.","category":"page"},{"location":"wizard/#Run-the-Wizard-1","page":"Wizard","title":"Run the Wizard","text":"","category":"section"},{"location":"wizard/#","page":"Wizard","title":"Wizard","text":"julia> using BinaryBuilder\njulia> run_wizard()","category":"page"},{"location":"wizard/#Select-platforms-1","page":"Wizard","title":"Select platforms","text":"","category":"section"},{"location":"wizard/#","page":"Wizard","title":"Wizard","text":"You can limit build to some specific platforms.","category":"page"},{"location":"wizard/#","page":"Wizard","title":"Wizard","text":"\t\t\t# Step 1: Select your platforms\n\nMake a platform selection\n > All Supported Platforms\n   Select by Operating System\n   Fully Custom Platform Choice","category":"page"},{"location":"wizard/#Select-C-library-github-repository-1","page":"Wizard","title":"Select C library github repository","text":"","category":"section"},{"location":"wizard/#","page":"Wizard","title":"Wizard","text":"\t\t\t# Step 2a: Obtain the source code\n\nPlease enter a URL (git repository or compressed archive) containing the source code to build:\n> https://github.com/jakubwro/sinewave","category":"page"},{"location":"wizard/#","page":"Wizard","title":"Wizard","text":"You have selected a git repository. Please enter a branch, commit or tag to use.\nPlease note that for reproducability, the exact commit will be recorded,\nso updates to the remote resource will not be used automatically;\nyou will have to manually update the recorded commit.\n> master","category":"page"},{"location":"wizard/#","page":"Wizard","title":"Wizard","text":"Then the Wizard can will ask if you want to include additional sources or binary dependencies but I am going to skip that by answering N.","category":"page"},{"location":"wizard/#Binary-dependencies-1","page":"Wizard","title":"Binary dependencies","text":"","category":"section"},{"location":"wizard/#","page":"Wizard","title":"Wizard","text":"sinewave C library has a dependency to FFTW so it needs to be specified during this step.","category":"page"},{"location":"wizard/#","page":"Wizard","title":"Wizard","text":"\t\t\t# Step 2b: Obtain binary dependencies (if any)\n\nDo you require any (binary) dependencies?  [y/N]: y\nEnter JLL package name:\n> FFTW_jll","category":"page"},{"location":"wizard/#Project-name-1","page":"Wizard","title":"Project name","text":"","category":"section"},{"location":"wizard/#","page":"Wizard","title":"Wizard","text":"Enter name of the original C project. In my case it `sinewave`. This will be used for filenames:\n> sinewave","category":"page"},{"location":"wizard/#Enter-version-of-the-project.-1","page":"Wizard","title":"Enter version of the project.","text":"","category":"section"},{"location":"wizard/#","page":"Wizard","title":"Wizard","text":"It should be 0.0.1, 0.1.0 or 1.0.0 for the first time (TODO: is that true?)","category":"page"},{"location":"wizard/#","page":"Wizard","title":"Wizard","text":"Enter a version number for this project:\n> 0.1.0","category":"page"},{"location":"wizard/#Sandbox-shell-1","page":"Wizard","title":"Sandbox shell","text":"","category":"section"},{"location":"wizard/#","page":"Wizard","title":"Wizard","text":"Now you'll be moved to a sandbox shell. There you should type commands to build shared libraries and copy them to predefined libdir and bindir directories. In my case Makefile handles that itself, so the only things I need to do is to enter source code directory and run make install","category":"page"},{"location":"wizard/#","page":"Wizard","title":"Wizard","text":"Do not use apk package manager for installing binary dependencies, they should be specified in Binary dependencies step as JLL packages. All haders you need are in ${prefix}/include directory and libraries required for linker should be present in ${libdir} locqtion.","category":"page"},{"location":"wizard/#","page":"Wizard","title":"Wizard","text":"sandbox:${WORKSPACE}/srcdir # cd sinewave/\nsandbox:${WORKSPACE}/srcdir/sinewave # export CPPFLAGS=\"-I${prefix}/include\"\nsandbox:${WORKSPACE}/srcdir/sinewave # export LDFLAGS=\"-L${libdir}\"\nsandbox:${WORKSPACE}/srcdir/sinewave # make install\ncc -I. -std=gnu99 -shared -fPIC -o libsinewave.so sinewave.c -lm\ncc -I. -std=gnu99 -o sine libsinewave.so examples/fill_and_print_buffer.c -lm\nmkdir -p /workspace/destdir/bin\nmkdir -p /workspace/destdir/lib\ncp libsinewave.so /workspace/destdir/lib\ncp sine /workspace/destdir/bin","category":"page"},{"location":"wizard/#","page":"Wizard","title":"Wizard","text":"After you finish press CTRL+D to quit sandbox. All you typed was recorded and will be stored in the result build recipe. There is an option to edit the script in vi, so you can delete unnecessary commands.","category":"page"},{"location":"wizard/#Select-artifacts-1","page":"Wizard","title":"Select artifacts","text":"","category":"section"},{"location":"wizard/#","page":"Wizard","title":"Wizard","text":"Now you need to select artifacts that you want to deploy. Despite that there is also executable generated, I am insterested in deploying just the library","category":"page"},{"location":"wizard/#","page":"Wizard","title":"Wizard","text":"\t\t\t# Step 4: Select build products\n\nThe build has produced several libraries and executables.\nPlease select which of these you want to consider `products`.\nThese are generally those artifacts you will load or use from julia.\n\n[press: d=done, a=all, n=none]\n   [ ] bin/sine\n > [X] lib/libsinewave.so","category":"page"},{"location":"wizard/#","page":"Wizard","title":"Wizard","text":"Provide a name for each of your artifacts. This name will be exported from jll project and you will need to specify it in ccall.","category":"page"},{"location":"wizard/#","page":"Wizard","title":"Wizard","text":"Please provide a unique variable name for each build artifact:\nlib/libsinewave.so:\n> libsinewave","category":"page"},{"location":"wizard/#Testing-the-build-recipe-against-all-specified-targets-1","page":"Wizard","title":"Testing the build recipe against all specified targets","text":"","category":"section"},{"location":"wizard/#","page":"Wizard","title":"Wizard","text":"Now the script will be tested against all build targets in sandboxes. If something will be wrong, you'll be moved to interactive shell to provide proper seqence of commands for the failing build.","category":"page"},{"location":"wizard/#Deployment-of-build-recipe.-1","page":"Wizard","title":"Deployment of build recipe.","text":"","category":"section"},{"location":"wizard/#","page":"Wizard","title":"Wizard","text":"Standard place to keep build recipes is Yggdrasil repository. Anyway, for tutorial purpose I am not going to deploy there. Local file suits me more for now.","category":"page"},{"location":"wizard/#","page":"Wizard","title":"Wizard","text":"\t\t\t# Step 7: Deployment\n\nHow should we deploy this build recipe?\n   Open a pull request against the community buildtree, Yggdrasil\n   Write to a local file\n > Print to stdout","category":"page"},{"location":"examples/#Examples-1","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/#Fill-array-with-sine-waveform-1","page":"Examples","title":"Fill array with sine waveform","text":"","category":"section"},{"location":"examples/#","page":"Examples","title":"Examples","text":"Finally we are ready to test the new module:","category":"page"},{"location":"examples/#","page":"Examples","title":"Examples","text":"julia> using SineWaves, UnicodePlots\n\njulia> buffer = zeros(Float64, 256);\n\njulia> s = SineWave(440.0, 48000.0);\n\njulia> fill!(buffer, s);\n\njulia> lineplot(buffer)\n      ┌────────────────────────────────────────┐\n    1 │⠀⠀⢰⠉⢣⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡎⠙⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠋⢣⠀⠀│\n      │⠀⢀⡇⠀⠈⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢱⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠁⠀│\n      │⠀⢸⠀⠀⠀⢱⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠈⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀│\n      │⠀⡇⠀⠀⠀⠘⡄⠀⠀⠀⠀⠀⠀⠀⠀⢸⠁⠀⠀⠀⢣⠀⠀⠀⠀⠀⠀⠀⠀⠀⡏⠀⠀⠀⠀⠀│\n      │⢠⠃⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡜⠀⠀⠀⠀⠸⡀⠀⠀⠀⠀⠀⠀⠀⢀⠇⠀⠀⠀⠀⠀│\n      │⣸⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⠀│\n      │⡇⠀⠀⠀⠀⠀⠘⡄⠀⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⠀⢣⠀⠀⠀⠀⠀⠀⠀⡎⠀⠀⠀⠀⠀⠀│\n      │⠥⠤⠤⠤⠤⠤⠤⡧⠤⠤⠤⠤⠤⠤⡼⠤⠤⠤⠤⠤⠤⢼⠤⠤⠤⠤⠤⠤⠤⡧⠤⠤⠤⠤⠤⠤│\n      │⠀⠀⠀⠀⠀⠀⠀⢱⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⠀⠀│\n      │⠀⠀⠀⠀⠀⠀⠀⠸⡀⠀⠀⠀⠀⢰⠃⠀⠀⠀⠀⠀⠀⠀⢇⠀⠀⠀⠀⠀⡞⠀⠀⠀⠀⠀⠀⠀│\n      │⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⡸⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀│\n      │⠀⠀⠀⠀⠀⠀⠀⠀⢳⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⢸⠀⠀⠀⠀⠀⠀⠀⠀│\n      │⠀⠀⠀⠀⠀⠀⠀⠀⠘⡄⠀⠀⢰⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⢣⠀⠀⠀⡎⠀⠀⠀⠀⠀⠀⠀⠀│\n      │⠀⠀⠀⠀⠀⠀⠀⠀⠀⢇⠀⠀⡎⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⡄⠀⢠⠃⠀⠀⠀⠀⠀⠀⠀⠀│\n   -1 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣆⡰⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢱⣀⡎⠀⠀⠀⠀⠀⠀⠀⠀⠀│\n      └────────────────────────────────────────┘\n      0                                      300\n","category":"page"},{"location":"examples/#Observe-spectrum-1","page":"Examples","title":"Observe spectrum","text":"","category":"section"},{"location":"examples/#","page":"Examples","title":"Examples","text":"julia> buffer = zeros(Float64, 256);\n\njulia> fill!(buffer, SineWave(8000.0, 48000.0));\n\njulia> lineplot(spectrum(buffer)./128)\n       ┌────────────────────────────────────────┐ \n   0.9 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n       │⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n       │⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n       │⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n       │⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n       │⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n       │⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n       │⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n       │⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n       │⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n       │⠀⠀⠀⠀⠀⠀⠀⠀⣾⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n       │⠀⠀⠀⠀⠀⠀⠀⠀⡟⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n       │⠀⠀⠀⠀⠀⠀⠀⠀⡇⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n       │⠀⠀⠀⠀⠀⠀⠀⢀⡇⢇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n     0 │⣀⣀⣀⣀⣀⡠⠤⠎⠀⠈⠳⠤⠤⣄⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│ \n       └────────────────────────────────────────┘ \n       0                                      200\n","category":"page"},{"location":"builder/#Build-tarballs-and-deploy-jll-project-1","page":"BinaryBuilder","title":"Build tarballs and deploy jll project","text":"","category":"section"},{"location":"builder/#","page":"BinaryBuilder","title":"BinaryBuilder","text":"Time to generate jll package. It will wrap C binaries and allow to import them into other projects with Julia's package manager (Pkg).","category":"page"},{"location":"builder/#Know-your-options-1","page":"BinaryBuilder","title":"Know your options","text":"","category":"section"},{"location":"builder/#","page":"BinaryBuilder","title":"BinaryBuilder","text":"Get familiar with options of the script with julia build_tarballs.jl --help command","category":"page"},{"location":"builder/#Choose-JLL-repository-1","page":"BinaryBuilder","title":"Choose JLL repository","text":"","category":"section"},{"location":"builder/#","page":"BinaryBuilder","title":"BinaryBuilder","text":"Create empty repo named sinewave_jll on github.","category":"page"},{"location":"builder/#","page":"BinaryBuilder","title":"BinaryBuilder","text":"Normally binary dependencies are hold in JuliaBinaryWrappers organisation. If you are going to share your binaries with a wider audience you should consider depoying it there instead of your personal account.","category":"page"},{"location":"builder/#Deployment-1","page":"BinaryBuilder","title":"Deployment","text":"","category":"section"},{"location":"builder/#","page":"BinaryBuilder","title":"BinaryBuilder","text":"Deploy JLL package and tarballs to the newly created repository.","category":"page"},{"location":"builder/#","page":"BinaryBuilder","title":"BinaryBuilder","text":"$ julia build_tarballs.jl --deploy=jakubwro/sinewave_jll","category":"page"},{"location":"builder/#","page":"BinaryBuilder","title":"BinaryBuilder","text":"The script will ask you for gihub user and password to generate an access token. If you are not comfortable with typing a password, you can set the token in an environment variable before running the script.","category":"page"},{"location":"builder/#","page":"BinaryBuilder","title":"BinaryBuilder","text":"$ export GITHUB_TOKEN={put your access token here}\n$ julia build_tarballs.jl --deploy=jakubwro/sinewave_jll","category":"page"},{"location":"builder/#","page":"BinaryBuilder","title":"BinaryBuilder","text":"When script is done JLL module is pushed to your repository and tarballs are visible in the releases tab.","category":"page"},{"location":"#SineWaves.jl-1","page":"Home","title":"SineWaves.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"","category":"page"},{"location":"#","page":"Home","title":"Home","text":"In this tutorial I will show how to add binary dependency to Julia using BinaryBuilder.jl package.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"| WARNING: presented procedure is not working on Windows yet!| | –- |","category":"page"},{"location":"#Installation-1","page":"Home","title":"Installation","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Ensure BinaryBuilder.jl is installed and up to date","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Open Julia's REPL\nIf you have no BinaryBuilder.jl installed press ] to enter pkg prompt and then use add command install the package.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"(v1.3) pkg> add BinaryBuilder\n Resolving package versions...\n  Updating `~/.julia/environments/v1.3/Project.toml`\n  [12aac903] + BinaryBuilder v0.2.2","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Otherwise update to the latest version with up command","category":"page"},{"location":"#","page":"Home","title":"Home","text":"(v1.3) pkg> up BinaryBuilder\n  Updating registry at `~/.julia/registries/General`\n  Updating git-repo `https://github.com/JuliaRegistries/General.git`\n Resolving package versions...\n  Updating `~/.julia/environments/v1.3/Project.toml`","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Press backspace to return to standard REPL.","category":"page"}]
}
