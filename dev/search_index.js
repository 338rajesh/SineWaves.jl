var documenterSearchIndex = {"docs":
[{"location":"ccalls/#Using-JLL-wrappers-in-a-module-1","page":"C calls wrapper","title":"Using JLL wrappers in a module","text":"","category":"section"},{"location":"ccalls/#","page":"C calls wrapper","title":"C calls wrapper","text":"The last step is to use JLL generated binary wrappers to expose a more Julia style API.","category":"page"},{"location":"ccalls/#","page":"C calls wrapper","title":"C calls wrapper","text":"First let's create new project needs to be generated with Pkg and add sinewave_jll binary wrapper as a dependency","category":"page"},{"location":"ccalls/#","page":"C calls wrapper","title":"C calls wrapper","text":"(v1.3) pkg> generate SineWave\n(v1.3) pkg> activate SineWave\n(v1.3) pkg> add sinewave_jll","category":"page"},{"location":"ccalls/#","page":"C calls wrapper","title":"C calls wrapper","text":"Original C library contains a simple struct and 2 functions:","category":"page"},{"location":"ccalls/#","page":"C calls wrapper","title":"C calls wrapper","text":"init to set values of the internal structure for given frequency\nfill to put consecutive values of the waveform generator","category":"page"},{"location":"ccalls/#","page":"C calls wrapper","title":"C calls wrapper","text":"Insetead of mapping init function directly I will create a Julia structure corresponding to the C structure. Due to the fact that Julia uses the same memory layout, there is no special mapping needed.","category":"page"},{"location":"ccalls/#","page":"C calls wrapper","title":"C calls wrapper","text":"mutable struct Sine\n    previous::Float64\n    current::Float64\n    cosine::Float64\nend","category":"page"},{"location":"ccalls/#","page":"C calls wrapper","title":"C calls wrapper","text":"Then I'll define a private constructor that calls the C init with ccall.","category":"page"},{"location":"ccalls/#","page":"C calls wrapper","title":"C calls wrapper","text":"    function Sine(frequency::Float64, samplerate::Float64)\n        sinewave = new()\n        status = ccall((:init, libsinewave), Cint, (Ref{Sine}, Cdouble, Cdouble), sinewave, frequency samplerate)\n        return sinewave\n    end","category":"page"},{"location":"ccalls/#","page":"C calls wrapper","title":"C calls wrapper","text":"Next I will map C fill function to Julia fill! function because the naming conventions for functions that modify their arguments is to add ! to the name.","category":"page"},{"location":"ccalls/#","page":"C calls wrapper","title":"C calls wrapper","text":"function fill!(buffer::Vector{Float64}, sine::Sine)\n    ccall((:fill, libsinewave), Cvoid, (Ref{Sine}, Ptr{Float64}, Cint), sine, buffer, length(buffer))\nend\n","category":"page"},{"location":"examples/#Examples-1","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/#","page":"Examples","title":"Examples","text":"Finally we are ready to test the new module:","category":"page"},{"location":"examples/#","page":"Examples","title":"Examples","text":"julia> using SineWaves, UnicodePlots\n\njulia> buffer = zeros(Float64, 256);\n\njulia> s = Sine(440.0, 48000.0);\n\njulia> SineWaves.fill!(buffer, s);\n\njulia> lineplot(buffer)\n      ┌────────────────────────────────────────┐\n    1 │⠀⠀⢰⠉⢣⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡎⠙⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠋⢣⠀⠀⠀⠀⠀⠀│\n      │⠀⢀⡇⠀⠈⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢱⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠁⠀⠀⠀⠀⠀│\n      │⠀⢸⠀⠀⠀⢱⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠈⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀│\n      │⠀⡇⠀⠀⠀⠘⡄⠀⠀⠀⠀⠀⠀⠀⠀⢸⠁⠀⠀⠀⢣⠀⠀⠀⠀⠀⠀⠀⠀⠀⡏⠀⠀⠀⠀⠀⠀⠀⠀⠀│\n      │⢠⠃⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡜⠀⠀⠀⠀⠸⡀⠀⠀⠀⠀⠀⠀⠀⢀⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀│\n      │⣸⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│\n      │⡇⠀⠀⠀⠀⠀⠘⡄⠀⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⠀⢣⠀⠀⠀⠀⠀⠀⠀⡎⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│\n      │⠥⠤⠤⠤⠤⠤⠤⡧⠤⠤⠤⠤⠤⠤⡼⠤⠤⠤⠤⠤⠤⢼⠤⠤⠤⠤⠤⠤⠤⡧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n      │⠀⠀⠀⠀⠀⠀⠀⢱⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│\n      │⠀⠀⠀⠀⠀⠀⠀⠸⡀⠀⠀⠀⠀⢰⠃⠀⠀⠀⠀⠀⠀⠀⢇⠀⠀⠀⠀⠀⡞⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│\n      │⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⡸⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│\n      │⠀⠀⠀⠀⠀⠀⠀⠀⢳⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│\n      │⠀⠀⠀⠀⠀⠀⠀⠀⠘⡄⠀⠀⢰⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⢣⠀⠀⠀⡎⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│\n      │⠀⠀⠀⠀⠀⠀⠀⠀⠀⢇⠀⠀⡎⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⡄⠀⢠⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│\n   -1 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣆⡰⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢱⣀⡎⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│\n      └────────────────────────────────────────┘\n      0                                      300\n","category":"page"},{"location":"builder/#Wizard-1","page":"Using BinaryBuilder","title":"Wizard","text":"","category":"section"},{"location":"builder/#Create-build-recipe-(build_tarballs.jl)-1","page":"Using BinaryBuilder","title":"Create build recipe (build_tarballs.jl)","text":"","category":"section"},{"location":"builder/#","page":"Using BinaryBuilder","title":"Using BinaryBuilder","text":"To create build_tarballs.jl script you might want to use run_wizard() function. Let's do that step by step.","category":"page"},{"location":"builder/#","page":"Using BinaryBuilder","title":"Using BinaryBuilder","text":"Run the Wizard","category":"page"},{"location":"builder/#","page":"Using BinaryBuilder","title":"Using BinaryBuilder","text":"julia> using BinaryBuilder\njulia> run_wizard()","category":"page"},{"location":"builder/#","page":"Using BinaryBuilder","title":"Using BinaryBuilder","text":"Select platforms","category":"page"},{"location":"builder/#","page":"Using BinaryBuilder","title":"Using BinaryBuilder","text":"You can limit build to some specific platforms.","category":"page"},{"location":"builder/#","page":"Using BinaryBuilder","title":"Using BinaryBuilder","text":"\t\t\t# Step 1: Select your platforms\n\nMake a platform selection\n > All Supported Platforms\n   Select by Operating System\n   Fully Custom Platform Choice","category":"page"},{"location":"builder/#","page":"Using BinaryBuilder","title":"Using BinaryBuilder","text":"Select C library github repository","category":"page"},{"location":"builder/#","page":"Using BinaryBuilder","title":"Using BinaryBuilder","text":"\t\t\t# Step 2a: Obtain the source code\n\nPlease enter a URL (git repository or compressed archive) containing the source code to build:\n> https://github.com/jakubwro/sinewave","category":"page"},{"location":"builder/#","page":"Using BinaryBuilder","title":"Using BinaryBuilder","text":"You have selected a git repository. Please enter a branch, commit or tag to use.\nPlease note that for reproducability, the exact commit will be recorded,\nso updates to the remote resource will not be used automatically;\nyou will have to manually update the recorded commit.\n> master","category":"page"},{"location":"builder/#","page":"Using BinaryBuilder","title":"Using BinaryBuilder","text":"Then the Wizard can will ask if you want to include additional sources or binary dependencies but I am going to skip that by answering N.","category":"page"},{"location":"builder/#","page":"Using BinaryBuilder","title":"Using BinaryBuilder","text":"Binary dependencies","category":"page"},{"location":"builder/#","page":"Using BinaryBuilder","title":"Using BinaryBuilder","text":"\t\t\t# Step 2b: Obtain binary dependencies (if any)\n\nDo you require any (binary) dependencies?  [y/N]: N","category":"page"},{"location":"builder/#","page":"Using BinaryBuilder","title":"Using BinaryBuilder","text":"Enter name of the original C project. In my case it sinewave","category":"page"},{"location":"builder/#","page":"Using BinaryBuilder","title":"Using BinaryBuilder","text":"Enter a name for this project.  This will be used for filenames:\n> sinewave","category":"page"},{"location":"builder/#","page":"Using BinaryBuilder","title":"Using BinaryBuilder","text":"Enter version of the project.","category":"page"},{"location":"builder/#","page":"Using BinaryBuilder","title":"Using BinaryBuilder","text":"It should be 0.0.1, 0.1.0 or 1.0.0 for the first time (TODO: is that true?)","category":"page"},{"location":"builder/#","page":"Using BinaryBuilder","title":"Using BinaryBuilder","text":"Enter a version number for this project:\n> 0.1.0","category":"page"},{"location":"builder/#","page":"Using BinaryBuilder","title":"Using BinaryBuilder","text":"Sandbox shell","category":"page"},{"location":"builder/#","page":"Using BinaryBuilder","title":"Using BinaryBuilder","text":"Now you'll be moved to a sandbox shell. There you should type commands to build shared libraries and copy them to predefined libdir and bindir directories. In my case Makefile handles that itself, so the only things I need to do is to enter source code directory and run make install","category":"page"},{"location":"builder/#","page":"Using BinaryBuilder","title":"Using BinaryBuilder","text":"sandbox:${WORKSPACE}/srcdir # cd sinewave/\nsandbox:${WORKSPACE}/srcdir/sinewave # make install\ncc -I. -std=gnu99 -shared -fPIC -o libsinewave.so sinewave.c -lm\ncc -I. -std=gnu99 -o sine libsinewave.so examples/fill_and_print_buffer.c -lm\nmkdir -p /workspace/destdir/bin\nmkdir -p /workspace/destdir/lib\ncp libsinewave.so /workspace/destdir/lib\ncp sine /workspace/destdir/bin","category":"page"},{"location":"builder/#","page":"Using BinaryBuilder","title":"Using BinaryBuilder","text":"After you finish press CTRL+D to quit sandbox. All you typed was recorded and will be stored in the result build recipe. There is an option to edit the script in vi, so you can delete unnecessary commands.","category":"page"},{"location":"builder/#","page":"Using BinaryBuilder","title":"Using BinaryBuilder","text":"After this step you need to select artifacts that you want to deploy. Despite that there is also executable generated, I am insterested in deploying just the library","category":"page"},{"location":"builder/#","page":"Using BinaryBuilder","title":"Using BinaryBuilder","text":"\t\t\t# Step 4: Select build products\n\nThe build has produced several libraries and executables.\nPlease select which of these you want to consider `products`.\nThese are generally those artifacts you will load or use from julia.\n\n[press: d=done, a=all, n=none]\n   [ ] bin/sine\n > [X] lib/libsinewave.so","category":"page"},{"location":"builder/#","page":"Using BinaryBuilder","title":"Using BinaryBuilder","text":"Provide a name for each of your artifacts. This name will be exported from jll project and you will need to specify it in ccall.","category":"page"},{"location":"builder/#","page":"Using BinaryBuilder","title":"Using BinaryBuilder","text":"Please provide a unique variable name for each build artifact:\nlib/libsinewave.so:\n> libsinewave","category":"page"},{"location":"builder/#","page":"Using BinaryBuilder","title":"Using BinaryBuilder","text":"Testing the build recipe against all specified targets","category":"page"},{"location":"builder/#","page":"Using BinaryBuilder","title":"Using BinaryBuilder","text":"Now the script will be tested against all build targets in sandboxes. If something will be wrong, you'll be moved to interactive shell to provide proper seqence of commands for the failing build.","category":"page"},{"location":"builder/#","page":"Using BinaryBuilder","title":"Using BinaryBuilder","text":"Deployment of build recipe.","category":"page"},{"location":"builder/#","page":"Using BinaryBuilder","title":"Using BinaryBuilder","text":"Standard place to keep build recipes is Yggdrasil repository. Anyway, for tutorial purpose I am not going to deploy there. Local file suits me more for now.","category":"page"},{"location":"builder/#","page":"Using BinaryBuilder","title":"Using BinaryBuilder","text":"\t\t\t# Step 7: Deployment\n\nHow should we deploy this build recipe?\n   Open a pull request against the community buildtree, Yggdrasil\n   Write to a local file\n > Print to stdout","category":"page"},{"location":"builder/#Build-tarballs-and-deploy-jll-project-1","page":"Using BinaryBuilder","title":"Build tarballs and deploy jll project","text":"","category":"section"},{"location":"builder/#","page":"Using BinaryBuilder","title":"Using BinaryBuilder","text":"Time to generate jll package. It will wrap C binaries and allow to import them into other projects with Julia's package manager (Pkg).","category":"page"},{"location":"builder/#","page":"Using BinaryBuilder","title":"Using BinaryBuilder","text":"Get familiar with options of the script with julia build_tarballs.jl --help command\nCreate empty repo named sinewave_jll on github","category":"page"},{"location":"builder/#","page":"Using BinaryBuilder","title":"Using BinaryBuilder","text":"Normally binary dependencies are hold in JuliaBinaryWrappers organisation. If you are going to share your binaries with a wider audience you should consider depoying it there instead of your personal account.","category":"page"},{"location":"builder/#","page":"Using BinaryBuilder","title":"Using BinaryBuilder","text":"Deploy JLL package and tarballs to the newly created repository","category":"page"},{"location":"builder/#","page":"Using BinaryBuilder","title":"Using BinaryBuilder","text":"$ julia build_tarballs.jl --deploy=jakubwro/sinewave_jll","category":"page"},{"location":"builder/#","page":"Using BinaryBuilder","title":"Using BinaryBuilder","text":"The script will ask you for gihub user and password to generate an access token. If you are not comfortable with typing a password, you can set the token in an environment variable before running the script.","category":"page"},{"location":"builder/#","page":"Using BinaryBuilder","title":"Using BinaryBuilder","text":"$ export GITHUB_TOKEN={put your access token here}\n$ julia build_tarballs.jl --deploy=jakubwro/sinewave_jll","category":"page"},{"location":"builder/#","page":"Using BinaryBuilder","title":"Using BinaryBuilder","text":"When script is done JLL module is pushed to your repository and tarballs are visible in the releases tab.","category":"page"},{"location":"#SineWaves.jl-1","page":"Home","title":"SineWaves.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"","category":"page"},{"location":"#","page":"Home","title":"Home","text":"In this tutorial I will show how to add binary dependency to Julia using BinaryBuilder.jl package.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"| WARNING: presented procedure is not working on Windows yet!| | –- |","category":"page"},{"location":"#Ensure-BinaryBuilder.jl-is-installed-and-up-to-date-1","page":"Home","title":"Ensure BinaryBuilder.jl is installed and up to date","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Open Julia's REPL\nIf you have no BinaryBuilder.jl installed press ] to enter pkg prompt and then use add command install the package.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"(v1.3) pkg> add BinaryBuilder\n Resolving package versions...\n  Updating `~/.julia/environments/v1.3/Project.toml`\n  [12aac903] + BinaryBuilder v0.2.2","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Otherwise update to the latest version with up command","category":"page"},{"location":"#","page":"Home","title":"Home","text":"(v1.3) pkg> up BinaryBuilder\n  Updating registry at `~/.julia/registries/General`\n  Updating git-repo `https://github.com/JuliaRegistries/General.git`\n Resolving package versions...\n  Updating `~/.julia/environments/v1.3/Project.toml`","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Press backspace to return to standard REPL.","category":"page"}]
}
